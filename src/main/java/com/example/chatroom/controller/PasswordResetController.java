package com.example.chatroom.controller;

import com.example.chatroom.model.User;
import com.example.chatroom.repository.UserRepository;
import com.example.chatroom.security.JwtUtil;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Map;
import java.util.Optional;

@CrossOrigin(origins = "*")
@RestController
@RequestMapping("/api/auth")
public class PasswordResetController {

    private final UserRepository userRepository;
    private final JavaMailSender mailSender;
    private final PasswordEncoder passwordEncoder;
    private final JwtUtil jwtUtil;

    public PasswordResetController(UserRepository userRepository, JavaMailSender mailSender, PasswordEncoder passwordEncoder, JwtUtil jwtUtil) {
        this.userRepository = userRepository;
        this.mailSender = mailSender;
        this.passwordEncoder = passwordEncoder;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/forgot-password")
    public ResponseEntity<String> forgotPassword(@RequestBody Map<String, String> request) {
        String email = request.get("email");

        if (email == null || email.isEmpty()) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }

        Optional<User> userOptional = userRepository.findByEmail(email);

        if (userOptional.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.");
        }

        // üÜï T·∫°o token v·ªõi th·ªùi gian h·∫øt h·∫°n 15 ph√∫t
        String token = jwtUtil.generateToken(email, 15 * 60 * 1000);
        String resetLink = "http://localhost:8080/reset-password.html#token=" + token;

        // G·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u
        sendEmail(email, resetLink);

        return ResponseEntity.ok("Email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
    }

    private void sendEmail(String to, String link) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(to);
        message.setSubject("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u");
        message.setText("Nh·∫•p v√†o li√™n k·∫øt ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + link);
        mailSender.send(message);
    }

    @PostMapping("/reset-password")
    public ResponseEntity<String> resetPassword(@RequestBody Map<String, String> request) {
        String token = request.get("token");
        String newPassword = request.get("newPassword");

        if (token == null || newPassword == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Token v√† m·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }

        // üÜï Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
        if (!jwtUtil.isTokenValid(token)) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n.");
        }

        // üÜï L·∫•y email t·ª´ JWT Token
        String email = jwtUtil.extractEmail(token);
        Optional<User> userOptional = userRepository.findByEmail(email);
        if (userOptional.isEmpty()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.");
        }

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
        User user = userOptional.get();
        user.setHashPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);

        return ResponseEntity.ok("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.");
    }
}
